/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from "./routes/__root"
import { Route as UploadRouteImport } from "./routes/upload"
import { Route as QueryRouteImport } from "./routes/query"
import { Route as EvaluateRouteImport } from "./routes/evaluate"
import { Route as IndexRouteImport } from "./routes/index"
import { Route as RagsIndexRouteImport } from "./routes/rags.index"
import { Route as DatasourcesIndexRouteImport } from "./routes/datasources.index"
import { Route as DatasetsIndexRouteImport } from "./routes/datasets.index"
import { Route as RagsCreateRouteImport } from "./routes/rags.create"
import { Route as RagsIdRouteImport } from "./routes/rags.$id"
import { Route as EvaluationsCompareRouteImport } from "./routes/evaluations.compare"
import { Route as EvaluationsIdRouteImport } from "./routes/evaluations.$id"

const UploadRoute = UploadRouteImport.update({
  id: "/upload",
  path: "/upload",
  getParentRoute: () => rootRouteImport,
} as any)
const QueryRoute = QueryRouteImport.update({
  id: "/query",
  path: "/query",
  getParentRoute: () => rootRouteImport,
} as any)
const EvaluateRoute = EvaluateRouteImport.update({
  id: "/evaluate",
  path: "/evaluate",
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRouteImport,
} as any)
const RagsIndexRoute = RagsIndexRouteImport.update({
  id: "/rags/",
  path: "/rags/",
  getParentRoute: () => rootRouteImport,
} as any)
const DatasourcesIndexRoute = DatasourcesIndexRouteImport.update({
  id: "/datasources/",
  path: "/datasources/",
  getParentRoute: () => rootRouteImport,
} as any)
const DatasetsIndexRoute = DatasetsIndexRouteImport.update({
  id: "/datasets/",
  path: "/datasets/",
  getParentRoute: () => rootRouteImport,
} as any)
const RagsCreateRoute = RagsCreateRouteImport.update({
  id: "/rags/create",
  path: "/rags/create",
  getParentRoute: () => rootRouteImport,
} as any)
const RagsIdRoute = RagsIdRouteImport.update({
  id: "/rags/$id",
  path: "/rags/$id",
  getParentRoute: () => rootRouteImport,
} as any)
const EvaluationsCompareRoute = EvaluationsCompareRouteImport.update({
  id: "/evaluations/compare",
  path: "/evaluations/compare",
  getParentRoute: () => rootRouteImport,
} as any)
const EvaluationsIdRoute = EvaluationsIdRouteImport.update({
  id: "/evaluations/$id",
  path: "/evaluations/$id",
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute
  "/evaluate": typeof EvaluateRoute
  "/query": typeof QueryRoute
  "/upload": typeof UploadRoute
  "/evaluations/$id": typeof EvaluationsIdRoute
  "/evaluations/compare": typeof EvaluationsCompareRoute
  "/rags/$id": typeof RagsIdRoute
  "/rags/create": typeof RagsCreateRoute
  "/datasets": typeof DatasetsIndexRoute
  "/datasources": typeof DatasourcesIndexRoute
  "/rags": typeof RagsIndexRoute
}
export interface FileRoutesByTo {
  "/": typeof IndexRoute
  "/evaluate": typeof EvaluateRoute
  "/query": typeof QueryRoute
  "/upload": typeof UploadRoute
  "/evaluations/$id": typeof EvaluationsIdRoute
  "/evaluations/compare": typeof EvaluationsCompareRoute
  "/rags/$id": typeof RagsIdRoute
  "/rags/create": typeof RagsCreateRoute
  "/datasets": typeof DatasetsIndexRoute
  "/datasources": typeof DatasourcesIndexRoute
  "/rags": typeof RagsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  "/": typeof IndexRoute
  "/evaluate": typeof EvaluateRoute
  "/query": typeof QueryRoute
  "/upload": typeof UploadRoute
  "/evaluations/$id": typeof EvaluationsIdRoute
  "/evaluations/compare": typeof EvaluationsCompareRoute
  "/rags/$id": typeof RagsIdRoute
  "/rags/create": typeof RagsCreateRoute
  "/datasets/": typeof DatasetsIndexRoute
  "/datasources/": typeof DatasourcesIndexRoute
  "/rags/": typeof RagsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | "/"
    | "/evaluate"
    | "/query"
    | "/upload"
    | "/evaluations/$id"
    | "/evaluations/compare"
    | "/rags/$id"
    | "/rags/create"
    | "/datasets"
    | "/datasources"
    | "/rags"
  fileRoutesByTo: FileRoutesByTo
  to:
    | "/"
    | "/evaluate"
    | "/query"
    | "/upload"
    | "/evaluations/$id"
    | "/evaluations/compare"
    | "/rags/$id"
    | "/rags/create"
    | "/datasets"
    | "/datasources"
    | "/rags"
  id:
    | "__root__"
    | "/"
    | "/evaluate"
    | "/query"
    | "/upload"
    | "/evaluations/$id"
    | "/evaluations/compare"
    | "/rags/$id"
    | "/rags/create"
    | "/datasets/"
    | "/datasources/"
    | "/rags/"
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  EvaluateRoute: typeof EvaluateRoute
  QueryRoute: typeof QueryRoute
  UploadRoute: typeof UploadRoute
  EvaluationsIdRoute: typeof EvaluationsIdRoute
  EvaluationsCompareRoute: typeof EvaluationsCompareRoute
  RagsIdRoute: typeof RagsIdRoute
  RagsCreateRoute: typeof RagsCreateRoute
  DatasetsIndexRoute: typeof DatasetsIndexRoute
  DatasourcesIndexRoute: typeof DatasourcesIndexRoute
  RagsIndexRoute: typeof RagsIndexRoute
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/upload": {
      id: "/upload"
      path: "/upload"
      fullPath: "/upload"
      preLoaderRoute: typeof UploadRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/query": {
      id: "/query"
      path: "/query"
      fullPath: "/query"
      preLoaderRoute: typeof QueryRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/evaluate": {
      id: "/evaluate"
      path: "/evaluate"
      fullPath: "/evaluate"
      preLoaderRoute: typeof EvaluateRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/": {
      id: "/"
      path: "/"
      fullPath: "/"
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/rags/": {
      id: "/rags/"
      path: "/rags"
      fullPath: "/rags"
      preLoaderRoute: typeof RagsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/datasources/": {
      id: "/datasources/"
      path: "/datasources"
      fullPath: "/datasources"
      preLoaderRoute: typeof DatasourcesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/datasets/": {
      id: "/datasets/"
      path: "/datasets"
      fullPath: "/datasets"
      preLoaderRoute: typeof DatasetsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/rags/create": {
      id: "/rags/create"
      path: "/rags/create"
      fullPath: "/rags/create"
      preLoaderRoute: typeof RagsCreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/rags/$id": {
      id: "/rags/$id"
      path: "/rags/$id"
      fullPath: "/rags/$id"
      preLoaderRoute: typeof RagsIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/evaluations/compare": {
      id: "/evaluations/compare"
      path: "/evaluations/compare"
      fullPath: "/evaluations/compare"
      preLoaderRoute: typeof EvaluationsCompareRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/evaluations/$id": {
      id: "/evaluations/$id"
      path: "/evaluations/$id"
      fullPath: "/evaluations/$id"
      preLoaderRoute: typeof EvaluationsIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  EvaluateRoute: EvaluateRoute,
  QueryRoute: QueryRoute,
  UploadRoute: UploadRoute,
  EvaluationsIdRoute: EvaluationsIdRoute,
  EvaluationsCompareRoute: EvaluationsCompareRoute,
  RagsIdRoute: RagsIdRoute,
  RagsCreateRoute: RagsCreateRoute,
  DatasetsIndexRoute: DatasetsIndexRoute,
  DatasourcesIndexRoute: DatasourcesIndexRoute,
  RagsIndexRoute: RagsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
